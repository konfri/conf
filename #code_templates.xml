<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java-statements" deleted="false" description="dynamic cast" enabled="true" name="cast selection">${type} ${new_name} = (${type}) ${word_selection}
	</template><template autoinsert="true" context="java" deleted="false" description="Disables formatting for the selected block enclosed inside formatter tags" enabled="true" name="disable formatting">// @formatter:off&#13;
${line_selection}${cursor}&#13;
// @formatter:on
	</template><template autoinsert="true" context="java-statements" deleted="false" description="iterate over map" enabled="true" name="for">${:import(java.util.Map.Entry)}&#13;
for(Entry&lt;${key:argType(map,0)},${value:argType(map,1)}&gt; entry : ${map:var(java.util.Map)}.entrySet()) {&#13;
		${key} key = entry.getKey();&#13;
		${value} value = entry.getValue();&#13;
		${cursor}&#13;
}
	</template><template autoinsert="true" context="java" deleted="false" description="create a new array" enabled="true" name="new array">${type}[] ${name} = new ${type}[${size}];</template><template autoinsert="true" context="java-statements" deleted="false" description="if not null" enabled="true" name="if">if (${var} != null){&#13;
    ${cursor}&#13;
}&#13;
</template><template autoinsert="true" context="java-statements" deleted="false" description="if null" enabled="true" name="if">if (${var} == null){&#13;
	${cursor}&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="uses the selection as if condition" enabled="true" name="if">if (${word_selection}){
    ${cursor}
}
</template><template autoinsert="true" context="java" deleted="false" description="Array declaration and initialisation" enabled="true" name="init">${type}[] ${name} = new ${type}[] {${cursor}};</template><template autoinsert="true" context="java" deleted="false" description="Declare a list and initialise it using asList()" enabled="true" name="init">${:import(java.util.List, java.util.Arrays)}
List&lt;${type}&gt; ${name:newName(java.util.List)} = Arrays.asList(${cursor});
	</template><template autoinsert="true" context="java" deleted="false" description="Create a new generic LinkedList" enabled="true" name="list">${:import(java.util.List,java.util.ListList)}
List&lt;${argType}&gt; ${newName} = new LinkedList&lt;&gt;();</template><template autoinsert="true" context="java" deleted="false" description="Create a new generic ArrayList" enabled="true" name="list">${:import(java.util.List,java.util.ArrayList)}
List&lt;${argType}&gt; ${newName} = new ArrayList&lt;&gt;();</template><template autoinsert="true" context="java" deleted="false" description="Create a new generic HashMap" enabled="true" name="map">${:import(java.util.Map,java.util.HashMap)}
Map&lt;${argType},${argType2}&gt; ${index:newName(map)} = new HashMap&lt;&gt;();</template><template autoinsert="true" context="java-statements" deleted="false" description="iterate over lines in file" enabled="true" name="readfile">${:import(java.nio.file.Files,&#13;
          java.nio.file.Paths,&#13;
          java.nio.charset.Charset,&#13;
          java.io.IOException,&#13;
          java.io.BufferedReader)}&#13;
try (BufferedReader in = Files.newBufferedReader(Paths.get(${fileName:var(String)}),&#13;
                                                 Charset.forName("UTF-8"))) {&#13;
	String line = null;&#13;
	while ((line = in.readLine()) != null) {&#13;
		${cursor}&#13;
	}&#13;
} catch (IOException e) {&#13;
    // ${todo}: handle exception&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="HashSet declaration" enabled="true" name="set">${:import(java.util.Set, java.util.HashSet)}
Set&lt;${type}&gt; ${name:newName(java.util.Set)} = new HashSet&lt;&gt;();
	</template><template autoinsert="false" context="java-members" deleted="false" description="static final field" enabled="true" id="org.eclipse.jdt.ui.templates.static_final" name="static_final">${visibility:link(public,protected,private)} static final ${type} ${NAME} = ${word_selection}${};</template><template autoinsert="true" context="java" deleted="false" description="format string with apostrophe" enabled="true" name="strf">String.format("${word_selection}${}",${var}${cursor})
	</template><template autoinsert="true" context="java" deleted="false" description="format string without apostrophe" enabled="true" name="strf">String.format(${word_selection}${},${var}${cursor})
	</template><template autoinsert="false" context="java" deleted="false" description="convert collection to array" enabled="true" id="org.eclipse.jdt.ui.templates.toarray" name="toarray">${type:elemType(collection)}[] ${name} = (${type:elemType(collection)}[]) ${collection}.toArray(new ${type}[${collection}.size()]);
	</template><template autoinsert="true" context="java-statements" deleted="false" description="write text to a file" enabled="true" name="writefile">${:import(java.nio.file.Files,&#13;
          java.nio.file.Paths,&#13;
          java.nio.charset.Charset,&#13;
          java.io.IOException,&#13;
          java.io.BufferedWriter)}&#13;
try (BufferedWriter out = Files.newBufferedWriter(Paths.get(${fileName:var(String)}),&#13;
                                                  Charset.forName("UTF-8"))) {&#13;
    out.write(${string:var(String)});&#13;
    out.newLine();&#13;
    ${cursor}&#13;
} catch (IOException e) {&#13;
    // ${todo}: handle exception&#13;
}&#13;
</template><template autoinsert="false" context="java" deleted="false" description="runnable" enabled="true" id="org.eclipse.jdt.ui.templates.runnable" name="runnable">new Runnable() {
    @Override
	public void run() {
		${line_selection}
	}
}</template><template autoinsert="true" context="java" deleted="false" description="Inject IEclipseContext" enabled="true" name="inject - Eclipse Context">@Inject
private IEclipseContext context;
${imp:import(javax.inject.Inject,org.eclipse.e4.core.contexts.IEclipseContext)}</template><template autoinsert="true" context="java" deleted="false" description="Inject UISynchronize" enabled="true" name="Inject - UI Synchronize">@Inject
private UISynchronize uiSynchronize;
${imp:import(javax.inject.Inject,org.eclipse.e4.ui.di.UISynchronize)}</template><template autoinsert="true" context="java" deleted="false" description="Inject the given type" enabled="true" name="Inject - Type">@Inject
private ${type} ${name};
${imp:import(javax.inject.Inject)}</template><template autoinsert="true" context="java" deleted="false" description="Create a new generic Treemap" enabled="true" name="tree map">${:import(java.util.SortedMap,java.util.TreeMap)}
SortedMap&lt;${argType},${argType2}&gt; ${index:newName(map)} = new TreeMap&lt;&gt;();</template></templates>
